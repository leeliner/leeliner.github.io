<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/posts/46d5.html"/>
      <url>/posts/46d5.html</url>
      
        <content type="html"><![CDATA[<pre><code>Markdown 目录：[TOC]Markdown 标题：# 这是 H1## 这是 H2### 这是 H3Markdown 列表：- 列表项目1. 列表项目*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~Markdown 插入链接：[链接文字](链接网址 &quot;标题&quot;)Markdown 插入图片：![alt text](/path/to/img.jpg &quot;Title&quot;)Markdown 插入代码块：    ```python    #!/usr/bin/python3    print(&quot;Hello, World!&quot;);    ```Markdown 引用：&gt; 引用内容Markdown 分割线：---Markdown 换行：&lt;br&gt;Markdown 段首缩进：&amp;ensp; or &amp;#8194; 表示一个半角的空格&amp;emsp; or &amp;#8195;  表示一个全角的空格&amp;emsp;&amp;emsp; 两个全角的空格（用的比较多）&amp;nbsp; or &amp;#160; 不断行的空白格</code></pre>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基本语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表的顺序存储</title>
      <link href="/posts/4570.html"/>
      <url>/posts/4570.html</url>
      
        <content type="html"><![CDATA[<h1 id="头部代码"><a href="#头部代码" class="headerlink" title="头部代码"></a>头部代码</h1><pre><code>#include &quot;stdio.h&quot;    #include &quot;stdlib.h&quot;   #include &quot;io.h&quot;  #include &quot;math.h&quot;  #include &quot;time.h&quot;#define OK 1#define ERROR 0#define TRUE 1#define FALSE 0#define MAXSIZE 20 /* 存储空间初始分配量 */</code></pre><p>typedef int Status;          /* Status是函数的类型,其值是函数结果状态代码，如OK等 <em>/<br>typedef int ElemType;        /</em> ElemType类型根据实际情况而定，这里假设为int */</p><h1 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h1><pre><code>typedef struct{    ElemType data[MAXSIZE];        /* 数组，存储数据元素 */    int length;                                /* 线性表当前长度 */}SqList;</code></pre><h1 id="查看元素"><a href="#查看元素" class="headerlink" title="查看元素"></a>查看元素</h1><pre><code>Status visit(ElemType c){    printf(&quot;%d &quot;,c);    return OK;}</code></pre><h1 id="初始化顺序线性表"><a href="#初始化顺序线性表" class="headerlink" title="/* 初始化顺序线性表 */"></a>/* 初始化顺序线性表 */</h1><pre><code>Status InitList(SqList *L) {     L-&gt;length=0;    return OK;}</code></pre><h1 id="初始条件：顺序线性表L已存在。操作结果：若L为空表，则返回TRUE，否则返回FALSE"><a href="#初始条件：顺序线性表L已存在。操作结果：若L为空表，则返回TRUE，否则返回FALSE" class="headerlink" title="/* 初始条件：顺序线性表L已存在。操作结果：若L为空表，则返回TRUE，否则返回FALSE */"></a>/* 初始条件：顺序线性表L已存在。操作结果：若L为空表，则返回TRUE，否则返回FALSE */</h1><pre><code>Status ListEmpty(SqList L){     if(L.length==0)        return TRUE;    else        return FALSE;}</code></pre><h1 id="初始条件：顺序线性表L已存在。操作结果：将L重置为空表"><a href="#初始条件：顺序线性表L已存在。操作结果：将L重置为空表" class="headerlink" title="/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */"></a>/* 初始条件：顺序线性表L已存在。操作结果：将L重置为空表 */</h1><pre><code>Status ClearList(SqList *L){     L-&gt;length=0;    return OK;}/* 初始条件：顺序线性表L已存在。操作结果：返回L中数据元素个数 */int ListLength(SqList L){    return L.length;}</code></pre><h1 id="初始条件：顺序线性表L已存在，1≤i≤ListLength-L"><a href="#初始条件：顺序线性表L已存在，1≤i≤ListLength-L" class="headerlink" title="/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */"></a>/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</h1><h1 id="操作结果：用e返回L中第i个数据元素的值-注意i是指位置，第1个位置的数组是从0开始"><a href="#操作结果：用e返回L中第i个数据元素的值-注意i是指位置，第1个位置的数组是从0开始" class="headerlink" title="/* 操作结果：用e返回L中第i个数据元素的值,注意i是指位置，第1个位置的数组是从0开始 */"></a>/* 操作结果：用e返回L中第i个数据元素的值,注意i是指位置，第1个位置的数组是从0开始 */</h1><pre><code>Status GetElem(SqList L,int i,ElemType *e){    if(L.length==0 || i&lt;1 || i&gt;L.length)            return ERROR;    *e=L.data[i-1];    return OK;}</code></pre><h1 id="初始条件：顺序线性表L已存在"><a href="#初始条件：顺序线性表L已存在" class="headerlink" title="/* 初始条件：顺序线性表L已存在 */"></a>/* 初始条件：顺序线性表L已存在 */</h1><h1 id="操作结果：返回L中第1个与e满足关系的数据元素的位序。"><a href="#操作结果：返回L中第1个与e满足关系的数据元素的位序。" class="headerlink" title="/* 操作结果：返回L中第1个与e满足关系的数据元素的位序。 */"></a>/* 操作结果：返回L中第1个与e满足关系的数据元素的位序。 */</h1><h1 id="若这样的数据元素不存在，则返回值为0"><a href="#若这样的数据元素不存在，则返回值为0" class="headerlink" title="/* 若这样的数据元素不存在，则返回值为0 */"></a>/* 若这样的数据元素不存在，则返回值为0 */</h1><pre><code>int LocateElem(SqList L,ElemType e){    int i;    if (L.length==0)            return 0;    for(i=0;i&lt;L.length;i++)    {            if (L.data[i]==e)                    break;    }    if(i&gt;=L.length)            return 0;    return i+1;}</code></pre><h1 id="初始条件：顺序线性表L已存在-1≤i≤ListLength-L-，"><a href="#初始条件：顺序线性表L已存在-1≤i≤ListLength-L-，" class="headerlink" title="/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */"></a>/* 初始条件：顺序线性表L已存在,1≤i≤ListLength(L)， */</h1><h1 id="操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1"><a href="#操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1" class="headerlink" title="/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */"></a>/* 操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1 */</h1><pre><code>Status ListInsert(SqList *L,int i,ElemType e){     int k;    if (L-&gt;length==MAXSIZE)  /* 顺序线性表已经满 */        return ERROR;    if (i&lt;1 || i&gt;L-&gt;length+1)/* 当i比第一位置小或者比最后一位置后一位置还要大时 */        return ERROR;    if (i&lt;=L-&gt;length)        /* 若插入数据位置不在表尾 */    {        for(k=L-&gt;length-1;k&gt;=i-1;k--)  /* 将要插入位置之后的数据元素向后移动一位 */            L-&gt;data[k+1]=L-&gt;data[k];    }    L-&gt;data[i-1]=e;          /* 将新元素插入 */    L-&gt;length++;    return OK;}</code></pre><h1 id="初始条件：顺序线性表L已存在，1≤i≤ListLength-L-1"><a href="#初始条件：顺序线性表L已存在，1≤i≤ListLength-L-1" class="headerlink" title="/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */"></a>/* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */</h1><h1 id="操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1"><a href="#操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1" class="headerlink" title="/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */"></a>/* 操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1 */</h1><pre><code>Status ListDelete(SqList *L,int i,ElemType *e) {     int k;    if (L-&gt;length==0)               /* 线性表为空 */        return ERROR;    if (i&lt;1 || i&gt;L-&gt;length)         /* 删除位置不正确 */        return ERROR;    *e=L-&gt;data[i-1];    if (i&lt;L-&gt;length)                /* 如果删除不是最后位置 */    {        for(k=i;k&lt;L-&gt;length;k++)/* 将删除位置后继元素前移 */            L-&gt;data[k-1]=L-&gt;data[k];    }    L-&gt;length--;    return OK;}</code></pre><h1 id="初始条件：顺序线性表L已存在-1"><a href="#初始条件：顺序线性表L已存在-1" class="headerlink" title="/* 初始条件：顺序线性表L已存在 */"></a>/* 初始条件：顺序线性表L已存在 */</h1><h1 id="操作结果：依次对L的每个数据元素输出"><a href="#操作结果：依次对L的每个数据元素输出" class="headerlink" title="/* 操作结果：依次对L的每个数据元素输出 */"></a>/* 操作结果：依次对L的每个数据元素输出 */</h1><pre><code>Status ListTraverse(SqList L){    int i;    for(i=0;i&lt;L.length;i++)            visit(L.data[i]);    printf(&quot;\n&quot;);    return OK;}</code></pre><pre><code>void unionL(SqList *La,SqList Lb){    int La_len,Lb_len,i;    ElemType e;    La_len=ListLength(*La);    Lb_len=ListLength(Lb);    for (i=1;i&lt;=Lb_len;i++)    {        GetElem(Lb,i,&amp;e);        if (!LocateElem(*La,e))            ListInsert(La,++La_len,e);    }}</code></pre><h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><pre><code>int main(){    SqList L;    SqList Lb;    ElemType e;    Status i;    int j,k;    i=InitList(&amp;L);    printf(&quot;初始化L后：L.length=%d\n&quot;,L.length);    for(j=1;j&lt;=5;j++)            i=ListInsert(&amp;L,1,j);    printf(&quot;在L的表头依次插入1～5后：L.data=&quot;);    ListTraverse(L);     printf(&quot;L.length=%d \n&quot;,L.length);    i=ListEmpty(L);    printf(&quot;L是否空：i=%d(1:是 0:否)\n&quot;,i);    i=ClearList(&amp;L);    printf(&quot;清空L后：L.length=%d\n&quot;,L.length);    i=ListEmpty(L);    printf(&quot;L是否空：i=%d(1:是 0:否)\n&quot;,i);    for(j=1;j&lt;=10;j++)            ListInsert(&amp;L,j,j);    printf(&quot;在L的表尾依次插入1～10后：L.data=&quot;);    ListTraverse(L);     printf(&quot;L.length=%d \n&quot;,L.length);    ListInsert(&amp;L,1,0);    printf(&quot;在L的表头插入0后：L.data=&quot;);    ListTraverse(L);     printf(&quot;L.length=%d \n&quot;,L.length);    GetElem(L,5,&amp;e);    printf(&quot;第5个元素的值为：%d\n&quot;,e);    for(j=3;j&lt;=4;j++)    {            k=LocateElem(L,j);            if(k)                    printf(&quot;第%d个元素的值为%d\n&quot;,k,j);            else                    printf(&quot;没有值为%d的元素\n&quot;,j);    }    k=ListLength(L); /* k为表长 */    for(j=k+1;j&gt;=k;j--)    {            i=ListDelete(&amp;L,j,&amp;e); /* 删除第j个数据 */            if(i==ERROR)                    printf(&quot;删除第%d个数据失败\n&quot;,j);            else                    printf(&quot;删除第%d个的元素值为：%d\n&quot;,j,e);    }    printf(&quot;依次输出L的元素：&quot;);    ListTraverse(L);     j=5;    ListDelete(&amp;L,j,&amp;e); /* 删除第5个数据 */    printf(&quot;删除第%d个的元素值为：%d\n&quot;,j,e);    printf(&quot;依次输出L的元素：&quot;);    ListTraverse(L);     //构造一个有10个数的Lb    i=InitList(&amp;Lb);    for(j=6;j&lt;=15;j++)            i=ListInsert(&amp;Lb,1,j);    unionL(&amp;L,Lb);    printf(&quot;依次输出合并了Lb的L的元素：&quot;);    ListTraverse(L);     return 0;}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
